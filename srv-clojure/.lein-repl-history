symbol
(symbol "foo-bar")
symbol?
(symbol? :foo)
(symbol? 'foo)
(keyword? :foo)
(keyword? 'foo)
(keyword "foo-bar")
map
type
(type "hello")
(type {:foo 17, :bar 42})
(type {"foo" 17, "bar" 42})
set
(set m {"foo" 17, "bar" 42})
(define m {"foo" 17, "bar" 42})
(def m {"foo" 17, "bar" 42})
m
(keys m)
(vals m)
(map keyword (keys m))
(def m {"foo" 42, "bar" 17})
m
(map keyword (keys m))
(vals m)
(zipmap (map keyword (keys m)) (vals m))
defn
m
(conj "baz" 666 m)
(conj m "baz" 666 )
(conj m ["baz", 666])
users
(user/help)
(load-file "core.clj")
(load-file "src/srv_clojure/core.clj")
users
srv-clojure.core/users
filter
(sorce filter)
(filter (fn [u] (= (:user u) "viveka") srv-clojure.core/users))
(filter (fn [u] (= (:user u) "viveka")) srv-clojure.core/users)
(filter (fn [u] (== (:user u) "viveka")) srv-clojure.core/users)
(= "viveka" "magnus")
(= "viveka" "viveka")
(filter (fn [u] (== (:name u) "viveka")) srv-clojure.core/users)
(filter (fn [u] (= (:name u) "viveka")) srv-clojure.core/users)
(def u (filter (fn [u] (= (:name u) "viveka")) srv-clojure.core/users))
u
(empty? u)
(nth 0 u)
(nth u 0)
contains?
(contains? (:pwords u) "magnus")
(:pwords u)
(contains? (:pwords (nth u 0)) "magnus")
(:pwords (nth u 0))
(some (partial = "magnus) (:pwords (nth u 0)))
)

(load-file "src/srv_clojure/core.clj")
some
(def u (filter (fn [u] (= (:name u) "viveka")) srv-clojure.core/users))
u
(def us (filter (fn [u] (= (:name u) "viveka")) srv-clojure.core/users))
(def u (nth us 0))
u
(some (fn [n] (= "magnus" n)) (:pwords u))
(some (fn [n] (= "mag" n)) (:pwords u))
lower-case
clojure.string/lower-case
(str 42)
(str "foo" ":" 54)
(load-file "src/srv_clojure/core.clj")
clj-time.core/now
(clj-time.core/now)
(load-file "src/srv_clojure/core.clj")
(clj-time.coerce/to-string (clj-time.core/now))
(clj-time.coerce/to-long (clj-time.core/now))
(load-file "src/srv_clojure/core.clj")
srv-clojure.core/create-token
(src !!)
(source srv-clojure.core/create-token)
(srv-clojure.core/create-token "magnus")
(require 'srv-clojure.crypto)
(require 'srv-clojure.crypto :reload)
(require 'srv-clojure.core)
(require 'srv-clojure.core :reload)
srv-clojure.core/do-auth
(require 'srv-clojure.core :reload)
srv-clojure.core/create-token
(require 'srv-clojure.core :reload :refer :all)
(require 'srv-clojure.core :reload :refer)
(require 'srv-clojure.core :reload :refer :all)
(require 'srv-clojure.core :reload :all)
(use 'srv-clojure.core)
create-token
(require 'srv-clojure.core :reload)
bytes
(srv-clojure.crypto/bytes "hell")
(bytes "hell")
(def s #{"a" "b"})
s
(type s)
(str s)
s
(require 'srv-clojure.core)
(group? "Viveka)
@)")
(srv-clojure.core/group? "Viveka")
(srv-clojure.core/group? "Sarah")
(srv-clojure.core/group? "Srah")
(require 'srv-clojure.core :reload)
(srv-clojure.core/group? srv-clojure.core/groups "Srah")
(srv-clojure.core/group? srv-clojure.core/groups "Sarah")
(srv-clojure.core/group? @srv-clojure.core/groups "Sarah")
(srv-clojure.core/group? @srv-clojure.core/groups "Srah")
(require 'srv-clojure.core :reload)
(srv-clojure.core/which-group? @srv-clojure.core/groups "Srah")
(srv-clojure.core/which-group? @srv-clojure.core/groups "Sarah")
(srv-clojure.core/which-group? @srv-clojure.core/groups "Viveka")
(list #s{1 2 3})
(list #{1 2 3})
(to-array #{1 2 3})
(require 'clojure.string)
clojure.string/split
(doc 'clojure.string/split)
(doc clojure.string/split)
(clojure.string/split "foo:bar:baz" ":")
(clojure.string/split "foo:bar:baz" #":")
(require 'srv-clojure.core :as core)
(require 'srv-clojure.core)
(require 'srv-clojure.core :reload)
(srv-clojure.core/create-token "foobar")
(srv-clojure.core/verify-token "m3g9JIGGFTVSNVYXd7HZRhTkx+juFctTQY5Ljv0jd2E=")
(require 'srv-clojure.core :reload)
(srv-clojure.core/verify-token "m3g9JIGGFTVSNVYXd7HZRhTkx+juFctTQY5Ljv0jd2E=")
'nil
'()
long
(doc long)
(long "1447096378427")
(println 42)
(require 'srv-clojure.core :reload)
(srv-clojure.core/verify-token "m3g9JIGGFTVSNVYXd7HZRhTkx+juFctTQY5Ljv0jd2E=")
(require 'srv-clojure.core :reload)
(srv-clojure.core/verify-token "m3g9JIGGFTVSNVYXd7HZRhTkx+juFctTQY5Ljv0jd2E=")
(require 'srv-clojure.core :reload)
(srv-clojure.core/verify-token "m3g9JIGGFTVSNVYXd7HZRhTkx+juFctTQY5Ljv0jd2E=")
(Long/valueOf "1447096378427")
(require 'srv-clojure.core :reload)
(srv-clojure.core/verify-token "m3g9JIGGFTVSNVYXd7HZRhTkx+juFctTQY5Ljv0jd2E=")
(require 'srv-clojure.core :reload)
(srv-clojure.core/verify-token "m3g9JIGGFTVSNVYXd7HZRhTkx+juFctTQY5Ljv0jd2E=")
clj-time.coerce/from-long
(require 'srv-clojure.core :reload)
(srv-clojure.core/verify-token "m3g9JIGGFTVSNVYXd7HZRhTkx+juFctTQY5Ljv0jd2E=")
clj-time.core/within?
(doc clj-time.core/within?)
(doc clj-time.core/after?)
(doc clj-time.core/plus)
(doc clj-time.core/plus-)
(doc clj-time.core/minus)
(doc clj-time.core/minutes)
(require 'srv-clojure.core :reload)
(srv-clojure.core/verify-token "m3g9JIGGFTVSNVYXd7HZRhTkx+juFctTQY5Ljv0jd2E=")
(doc clj-time.core/after?)
(require 'srv-clojure.core :reload)
(srv-clojure.core/verify-token "m3g9JIGGFTVSNVYXd7HZRhTkx+juFctTQY5Ljv0jd2E=")
(srv-clojure.core/create-token "foobar")
(srv-clojure.core/verify-token "UO11r41o7nHScCAWq2Ueo21P4w1Qsym7utpNdUSZCHY="
)
(srv-clojure.core/verify-token "UO11r41o7nHScCAWq2Ueo21P4w1Qsym7utpNdUSZCHY=")
(doc clj-time.core/before?)
(require 'srv-clojure.core :reload)
(srv-clojure.core/verify-token "UO11r41o7nHScCAWq2Ueo21P4w1Qsym7utpNdUSZCHY=")
(require 'srv-clojure.core :reload)
(srv-clojure.core/verify-token "UO11r41o7nHScCAWq2Ueo21P4w1Qsym7utpNdUSZCHY=")
(srv-clojure.core/verify-token "m3g9JIGGFTVSNVYXd7HZRhTkx+juFctTQY5Ljv0jd2E=")
(require 'srv-clojure.core :reload)
(srv-clojure.core/verify-token "m3g9JIGGFTVSNVYXd7HZRhTkx+juFctTQY5Ljv0jd2E=")
(srv-clojure.core/verify-token "UO11r41o7nHScCAWq2Ueo21P4w1Qsym7utpNdUSZCHY=")
(srv-clojure.core/create-token "foobar")
(srv-clojure.core/verify-token "K+fmFVWDhPIHQErTFl8WHXZ3GFn78ZOp70lLZh3RmCU=")
(require 'srv-clojure.core :reload)
(srv-clojure.core/verify-token "K+fmFVWDhPIHQErTFl8WHXZ3GFn78ZOp70lLZh3RmCU=")
(srv-clojure.core/verify-token "UO11r41o7nHScCAWq2Ueo21P4w1Qsym7utpNdUSZCHY=")
(srv-clojure.core/verify-token "m3g9JIGGFTVSNVYXd7HZRhTkx+juFctTQY5Ljv0jd2E=")
(require 'srv-clojure.core :reload)
(srv-clojure.core/decrypt-token "foo")
(srv-clojure.core/decrypt-token "m3g9JIGGFTVSNVYXd7HZRhTkx+juFctTQY5Ljv0jd2E=")
(def s #{1 2 2 3 4 5 1})
(def s #{1 2  3 4 5 1})
(def s #{1 2  3 4 5 })
s
(disj s)
(disj s 2)
(require 'srv-clojure.core :reload)
(srv-clojure.core/swap-groups @groups "Viveka")
(srv-clojure.core/swap-groups @srv-clojure.core/groups "Viveka")
(def foo {:foo 17 :bar 42})
foo
(assoc foo :foo 666)
foo
(assoc foo :foo 666 :baz 0)
(require 'srv-clojure.core :reload)
(srv-clojure.core/swap-groups @srv-clojure.core/groups "Viveka")
(srv-clojure.core/swap-groups @srv-clojure.core/groups "Sarah")
(require 'srv-clojure.core :reload)
(def v [])
(def v [1,2,3])
v
(conj v 42)
(pop v)
(next v)
(first v)
(require 'srv-clojure.core :reload)
(srv-clojure.core/add-to-swappers @srv-clojure.core/groups "foobar")
(require 'srv-clojure.core :reload)
(srv-clojure.core/enqueue-swappers @srv-clojure.core/groups "foobar")
(srv-clojure.core/dequeue-swappers @srv-clojure.core/groups)
(require 'srv-clojure.core :reload)
(srv-clojure.core/dequeue-swappers @srv-clojure.core/groups)
(def ng (srv-clojure.core/dequeue-swappers @srv-clojure.core/groups))
ng
(srv-clojure.core/enqueue-swappers ng "foobar")
(require 'srv-clojure.core :reload)
group-by
srv-clojure.core/groups
(type (:swappers srv-clojure.core/groups))
(def l '())
(type l)
(conj l 4)
(def l '(1,2,3))
(conj l 4)
(first l)
(last l)
(butlast l)
(butlast '())
(next l)
(rest l)
(cons l 5)
(cons 5 l)
(rest '())
(nest '())
(next '())
(concat l (list 5))
(first l)
(require 'srv-clojure.core :reload)
(srv-clojure.core/enqueue-swappers ng "foobar")
(def ng (srv-clojure.core/dequeue-swappers @srv-clojure.core/groups))
(def ng (srv-clojure.core/dequeue-swappers srv-clojure.core/groups))
ng
(def ng (srv-clojure.core/enqueue-swappers srv-clojure.core/groups "foobar"))
ng
(srv-clojure.core/enqueue-swappers ng "another")
(srv-clojure.core/dequeue-swappers ng)
(srv-clojure.core/dequeue-swappers srv-clojure.core/groups)
(empty '())
(empty? '())
(empty? '(1))
(require 'srv-clojure.core :reload)
(srv-clojure.core/perform-swap srv-clojure.core/groups "Viveka")
(srv-clojure.core/perform-swap srv-clojure.core/groups "Sarah")
(def ng (srv-clojure.core/perform-swap srv-clojure.core/groups "Sarah"))
(srv-clojure.core/perform-swap ng "Viveka")
(def ng (srv-clojure.core/perform-swap srv-clojure.core/groups "Viveka"))
ng
(srv-clojure.core/perform-swap ng "Viveka")
(srv-clojure.core/perform-swap ng "Sarah")
(require 'srv-clojure.core :reload)
(-> srv-clojure.core/groups (partial srv-clojure.core/swap-groups2 "Viveka"))
(require 'srv-clojure.core :reload)
(srv-clojure.core/perform-swap2 srv-clojure.core/groups "Viveka")
(srv-clojure.core/perform-swap2 srv-clojure.core/groups "Sarah")
(def ng (srv-clojure.core/perform-swap2 srv-clojure.core/groups "Sarah"))
ng
(srv-clojure.core/perform-swap2 ng "Viveka")
ng
(require 'srv-clojure.core :reload)
(srv-clojure.core/perform-swap2 ng "Viveka")
(require 'srv-clojure.core :reload)
(srv-clojure.core/perform-swap2 ng "Viveka")
(srv-clojure.core/perform-swap ng "Viveka")
(require 'srv-clojure.core :reload)
(srv-clojure.core/perform-swap2 ng "Viveka")
(require 'srv-clojure.core :reload)
(srv-clojure.core/perform-swap2 ng "Viveka")
(require 'srv-clojure.core :reload)
(srv-clojure.core/perform-swap ng "iveka")
(require 'srv-clojure.core :reload)
@srv-clojure.core/groups
(srv-clojure.core/do-swap {:token "F7bsov5C0wzzPyG0eWD6UvUEwobxj+p3jGwwayD8c2U="})
@srv-clojure.core/groups
(srv-clojure.core/do-swap {:token "F7bsov5C0wzzPyG0eWD6UvUEwobxj+p3jGwwayD8c2U="})
@srv-clojure.core/groups
(require 'srv-clojure.core :reload)
@srv-clojure.core/groups
(srv-clojure.core/do-swap {:token "GruvkJYeHA2dEXbGm4IktGHtF73GQw/SKiddhllTd+Q="})
(srv-clojure.core/do-swap {:token "eI1pBNdRyTV6AkzmvjGcwC8z0Ne5btQK9dqiH3p4b3M="})
@srv-clojure.core/groups
(require 'srv-clojure.core :reload)
(require 'srv-clojure.token :reload)
(require 'srv-clojure.core :reload)
(require 'srv-clojure.token :reload)
(require 'srv-clojure.core :reload)
(require 'srv-clojure.token :reload)
(require 'srv-clojure.core :reload)
(hash-set '())
(hash-set 1 2 3 4)
(hash 1)
apply
(apply hash-set '(1 2 3))
(apply hash-set [1 2 3])
